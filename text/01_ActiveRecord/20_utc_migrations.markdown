## Timestamped Migrations
              
When you are just starting Rails or developing something on your own, **migrations** seem to be the best solution to all of your problems. However, when with a team of developers on a project, you will find out (if you haven't already) that it becomes a bit more troublesome to handle race conditions on migrations. The new timestamped migrations in Rails 2.1 to the rescue.

Before the introduction of **timestamped migrations**, each new migration created had a number which prefaced the migration name. If two migrations were generated by different developers and not committed instantly, they could end up having the same number preface by different migration info. At this point your schema_info is out of date and you have a conflict in your source control.
        
There were many ways to "try" to solve this problem. Many plugins were created with different approaches to solve this issue. Despite the plugins available, one thing was clear: the old way simply didn't work.     

If you were using Git, then you would be digging an even deeper hole, since your team would probably have a couple of working branches and out-of-date **migrations** in all of them. You would have serious conflict problems when merging branches.
                 
To solve this huge problem, the core team changed how **migrations** works in Rails.  Instead of prefacing each migration file with a number from corresponding to the current schema_info's version count, it is now prefaced with a string based on the **UTC** time and following the format YYYYMMDDHHMMSS.

Also a new table called **schema_migrations** was created and it stores which **migrations** that have already been executed. That way, if anyone creates a **migration** with a smaller number, rails will **rollback** migrations until the previous version and then run everything up to the current version.

Apparently, it solves the conflict problem with **migrations**.

There are also two new rake tasks to "walk through" **migrations**:

	rake db:migrate:up
	rake db:migrate:down

